[{"content":"前言 記錄一些好玩的線上練習網站\nCSS CSS Dinner Flexbox Froggy Flex Pirate Grid Garden Git Learn Git Branching HTTP HTTP Challenge Network The Case of the Slow Websites The Case of the Connection Timeout The Case of the DNS Update that Didn’t Work The Case of the 50ms Request Regex RegexOne SQL W3Schools SQL Exercise SQLBolt XSS XSS game ","permalink":"http://localhost:1313/posts/awesome-online-exercises/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e記錄一些好玩的線上練習網站\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"css\"\u003eCSS\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://flukeout.github.io/\"\u003eCSS Dinner\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flexboxfroggy.com/\"\u003eFlexbox Froggy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hexschool.github.io/flexbox-pirate/index.html\"\u003eFlex Pirate\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cssgridgarden.com/\"\u003eGrid Garden\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"git\"\u003eGit\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://learngitbranching.js.org/index.html\"\u003eLearn Git Branching\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"http\"\u003eHTTP\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lidemy-http-challenge.herokuapp.com/start\"\u003eHTTP Challenge\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"network\"\u003eNetwork\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://mysteries.wizardzines.com/slow-website.html\"\u003eThe Case of the Slow Websites\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mysteries.wizardzines.com/connection-timeout.html\"\u003eThe Case of the Connection Timeout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mysteries.wizardzines.com/problem-dns-update.html\"\u003eThe Case of the DNS Update that Didn’t Work\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mysteries.wizardzines.com/50ms-request.html\"\u003eThe Case of the 50ms Request\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"regex\"\u003eRegex\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://regexone.com/\"\u003eRegexOne\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"sql\"\u003eSQL\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/sql/exercise.asp\"\u003eW3Schools SQL Exercise\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://sqlbolt.com/\"\u003eSQLBolt\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"xss\"\u003eXSS\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://xss-game.appspot.com/\"\u003eXSS game\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Awesome Online Exercises"},{"content":"前言 因為不小心手殘把 local 的 Hexo 設定砍了\u0026hellip; 所以藉此來紀念我的手殘及記錄一下我的 Hexo blog 做了哪些設定\n設定 deploy 到 GitHub page 上 安裝套件：\nnpm install --save hexo-deployer-git 調整 _config.yml：\ndeploy: type: git repo: \u0026lt;repository url\u0026gt; NexT 安裝 NexT：\nnpm install hexo-theme-next --save 將 NexT 的設定檔複製出來：\ncp node_modules/hexo-theme-next/_config.yml _config.next.yml 把 _config.yml 中的 theme 改成使用 NexT：\ntheme: next Sitemap 安裝套件：\nnpm install hexo-generator-sitemap --save 外部連結 nofollow 安裝套件：\nnpm install hexo-filter-nofollow --save Minifier 安裝套件：\nnpm install hexo-all-minifier --save 在 _config.yml 中加入：\nall_minifier: true 搜尋 安裝套件：\nnpm install hexo-generator-searchdb --save 打開人數統計 把 busuanzi_count 的 enable 改成 true：\nbusuanzi_count: enable: true 使用 Gitalk 當留言板 Gitalk 评论系统\n新增 404 頁面 (23) 試著學 Hexo - SEO 篇 - 新增你的 404 頁面\n文章置頂 安裝套件：\nnpm install hexo-generator-topindex --save 參考資料 Hexo 套件推薦 Gitalk 评论系统 (23) 試著學 Hexo - SEO 篇 - 新增你的 404 頁面 ","permalink":"http://localhost:1313/posts/hexo-configuration/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e因為不小心手殘把 local 的 Hexo 設定砍了\u0026hellip;\n所以藉此來紀念我的手殘及記錄一下我的 Hexo blog 做了哪些設定\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"設定-deploy-到-github-page-上\"\u003e設定 deploy 到 GitHub page 上\u003c/h3\u003e\n\u003cp\u003e安裝套件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm install --save hexo-deployer-git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e調整 \u003ccode\u003e_config.yml\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003edeploy\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003egit\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003erepo\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e\u0026lt;repository url\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"next\"\u003eNexT\u003c/h3\u003e\n\u003cp\u003e安裝 NexT：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm install hexo-theme-next --save\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e將 NexT 的設定檔複製出來：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecp node_modules/hexo-theme-next/_config.yml _config.next.yml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e把 \u003ccode\u003e_config.yml\u003c/code\u003e 中的 \u003ccode\u003etheme\u003c/code\u003e 改成使用 NexT：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003etheme\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"sitemap\"\u003eSitemap\u003c/h3\u003e\n\u003cp\u003e安裝套件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm install hexo-generator-sitemap --save\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"外部連結-nofollow\"\u003e外部連結 nofollow\u003c/h3\u003e\n\u003cp\u003e安裝套件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm install hexo-filter-nofollow --save\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"minifier\"\u003eMinifier\u003c/h3\u003e\n\u003cp\u003e安裝套件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm install hexo-all-minifier --save\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 \u003ccode\u003e_config.yml\u003c/code\u003e 中加入：\u003c/p\u003e","title":"Hexo 配置"},{"content":"前言 在面試的時候被問到 GIL，雖然我是直接回答說我看不懂，但是仔細想想上一次看也是快一年前了，於是想趁報到前再來挑戰一次 GIL\n主要會分兩個部分來講\nGIL 是什麼 GIL 會造成什麼影響 如何避免 GIL 造成的問題 總結 GIL 是什麼？ In CPython, the global interpreter lock, or GIL, is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once. The GIL prevents race conditions and ensures thread safety. A nice explanation of how the Python GIL helps in these areas can be found here. In short, this mutex is necessary mainly because CPython’s memory management is not thread-safe.\n簡單來說，GIL 是一個 mutex，用來避免在 multi-threading 的情況下發生 race condition 並確保 thread safety\n來源：https://wiki.python.org/moin/GlobalInterpreterLock\n這邊又出現了三個名詞：\nmutex race condition thread safe 接著先讓我們搞懂這三個東西是什麼再接著說下去\n因為其他兩個名詞都跟 race condition 有關，所以在講其他兩個之前我們得先了解 race condition 是什麼\nRace Condition 在 multi-threading 的情況下，每個 thread 的資源是共享的，所以不同的 thread 可以同時讀寫同一個變數，這樣就會造成程式輸出的結果有可能會因為不同 thread 執行的先後而導致輸出完全不一樣，例如：\n我們現在用兩個 thread 跑同樣的程式 count++，假設兩個 thread 分別是 t1、t2，執行程式的過程都是一樣，要經過下面這兩步\n拿到 count 的值 把 count 的值 +1 後存回去 當執行順序是這樣的話：\ncount 預設值為 0\nt1 拿 count 值 -\u0026gt; count = 0 t2 拿 count 值 -\u0026gt; count = 0 t1 把 count + 1 (0 + 1 = 1) 存回去 -\u0026gt; count = 1 t2 把 count + 1 (0 + 1 = 1) 存回去 -\u0026gt; count = 1 我們原本的預期行為是 count = 2，但是因為變數共用再加上這樣的執行順序就有可能導致 count = 1，這樣的狀況我們就稱為 race condition\nMutex Mutex 就是一種避免發生 race condition 的方式，它的做法就是把共用的區塊加上一把鎖，在有其中一個 thread 正在讀寫這個區塊時，其他的 thread 就不能讀寫這個區塊。加上鎖後，上面的狀況就會變成這樣：\nt1 拿 count 值，並把 count 鎖起來 -\u0026gt; count = 0 t2 嘗試拿 count 值，但 count 被鎖了，所以拿不到 t1 把 count + 1 (0 + 1 = 1) 存回去，並解鎖 count -\u0026gt; count = 1 （因為 count 的鎖被解開了）t2 拿 count 值 -\u0026gt; count = 1 t2 把 count + 1 (1 + 1 = 2) 存回去 -\u0026gt; count = 2 這樣的值就跟我們預期中的一樣了\nThread Safety 可以簡單理解成，不會發生 race condition 的狀況就是 thread safety\nGIL 會造成什麼影響 了解 GIL 是什麼後，我們就可以來看一下 GIL 造成了什麼影響\n我們要先分成 I/O bound 跟 CPU bound 兩種不同類型的程式來看\nI/O bound\n在 I/O bound 的程式下，只要執行 blocking 的 system call，系統就會釋放 CPU 資源給其他 thread 使用，所以 GIL 對 I/O bound 的影響並不大\nCPU bound\nCPU bound 這邊要再分成單核跟多核的狀況來看\n單核\n不同的 thread 輪流使用 CPU 資源，整體上除了跑起來從原本預期的 parallel 變成 concurrent 之外沒什麼太大的影響\n多核\n如果兩個執行 CPU bound 任務的 thread 在不同的核心上執行，可能會出現以下的情況：其中一個核心上的 thread 在拿到 GIL 後執行任務時，另一個核心上的 thread 不停地搶 GIL 失敗，於是該核心長期處於空轉的狀態\n如何避免 GIL 造成的問題 GIL 只有在 CPython 上有，所以可以換其他的 interpreter，如：PyPy、Jython。如果在不能換掉 CPython 的狀況下，可以改用 multi-processing 來執行 CPU bound 的任務\n總結 GIL 的作用是避免產生 race condition 並確保 thread safety GIL 對 CPU bound 的任務影響比較大 可以透過換其他的 interpreter 或是改用 multi-processing 來避免 GIL 產生的效能問題 參考資料 Python的GIL是什么鬼，多线程性能究竟如何 Python3 原始碼閱讀-深入瞭解Python GIL 深入 GIL: 如何寫出快速且 thread-safe 的 Python – Grok the GIL: How to write fast and thread-safe Python ","permalink":"http://localhost:1313/posts/python-gil-details/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e在面試的時候被問到 GIL，雖然我是直接回答說我看不懂，但是仔細想想上一次看也是快一年前了，於是想趁報到前再來挑戰一次 GIL\u003c/p\u003e\n\u003cp\u003e主要會分兩個部分來講\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGIL 是什麼\u003c/li\u003e\n\u003cli\u003eGIL 會造成什麼影響\u003c/li\u003e\n\u003cli\u003e如何避免 GIL 造成的問題\u003c/li\u003e\n\u003cli\u003e總結\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"gil-是什麼\"\u003eGIL 是什麼？\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIn CPython, the global interpreter lock, or GIL, is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once. The GIL prevents race conditions and ensures thread safety. A nice explanation of \u003ca href=\"https://python.land/python-concurrency/the-python-gil\"\u003ehow the Python GIL helps in these areas can be found here\u003c/a\u003e. In short, this mutex is necessary mainly because CPython’s memory management is not thread-safe.\u003c/p\u003e","title":"Python 的 GIL 是什麼？"},{"content":"前言 面試的時候被考到一題情境題覺得蠻有趣的，於是決定記錄下來。\n面試過程 面試官：今天有一個網站是 3-tier 的架構（前端、後端、資料庫），某天你發現首頁 load 不出來，這時候你會怎麼做？\n我：打開瀏覽器的 console 看 network 那邊的 request 狀態是怎樣。\n面試官：你打開了，看到 request 沒有回傳 response，就卡著。\n我：這樣看起來是後端掛了，先檢查後端的 log。\n面試官：後端沒有 log，但是這個 controller 只有跟 db 撈資料，其他都沒有做。\n我：那應該是後端跟 db 溝通的時候卡住了，這張表很大嗎？\n面試官：大概 10 萬筆。\n我：那應該還好，db 那台的 memory 跟 CPU 都是健康的嗎？\n面試官：CPU 跟 memory 的 usage 都不超過 30%。\n我：db 是 RDS 嗎？\n面試官：是。\n我：RDS 可以看每條 query 跑的狀況，這條 query 跑的狀況有異常嗎？\n面試官：前幾次跑都沒問題，但是這次掛了。\n我：…\n面試官：那現在是什麼問題？你需要一點提示嗎？\n我：好，我要提示。\n面試官：你手動連接 db 發現連不進去了。\n我：那應該是 connection pool 沒設定好，需要檢查一下 connection pool 的設定。\n面試官：好，那今天你把 connection pool 調小一點，然後 bug 解掉了，但是過幾個月後流量暴增，現在服務又卡住了，你要怎麼優化？\n我：SQL 是讀寫都有，還是只有讀而已？\n面試官：只有讀。\n我：對 db 做 replica。\n面試官：OK，這樣問題解掉了，但是你的解法很浪費資源，因為效能瓶頸是卡在 db，不是後端流量被灌爆，但是你為了 replica，後端也要新開一台出來，但是大部分時間後端的利用率是很低的，你還有其他方法嗎？\n我：有錢嗎？\n面試官：老闆說，錢管夠。\n我：機器多開幾台。\n面試官：這是一個方法沒錯，還有其他的方法嗎？\n我：優化 SQL 的寫法，然後加上 cache。\n面試官：你的 cache 打算怎麼做？\n我：在後端做 cache。\n面試官：cache 的 key 是什麼？\n我：我應該會用頁面當作 key。\n面試官：OK 看起來應該差不多了。\n感想 這是一次蠻新鮮的面試經驗，以前從沒被這樣考過，但是我還挺喜歡這種考法的，很貼近現實，而且考得層面很廣，考完一次大概就可以知道你大概懂哪些東西，哪邊地方比較弱，雖然這次考得算是我比較弱的 db 部分，但是在面試官的引導下還算是過關了。\n知識總結 網頁 load 不出來 - 需要知道前端掛掉時怎麼找到前端的 log 跟 request 現在的狀態。 後端沒有 response - 這就代表了不是前端的問題，主要是卡在後端的 controller 那層。 後端的 code 只有跟 db 撈資料 - 需要知道 db 出狀況有哪些方式可以找到 db 的 log 或是該怎麼檢查 db 的狀態。 db 連不進去 - 需要知道造成 db 連不進去有可能的原因有哪些。 優化整個服務的效能 - 需要先抓到整個服務的效能瓶頸在哪，然後針對這個環節有哪些優化的手段，還有手上有哪些資源可以使用（人/錢）。 ","permalink":"http://localhost:1313/posts/interview-debug-scenario/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e面試的時候被考到一題情境題覺得蠻有趣的，於是決定記錄下來。\u003c/p\u003e\n\u003ch2 id=\"面試過程\"\u003e面試過程\u003c/h2\u003e\n\u003cp\u003e面試官：今天有一個網站是 3-tier 的架構（前端、後端、資料庫），某天你發現首頁 load 不出來，這時候你會怎麼做？\u003c/p\u003e\n\u003cp\u003e我：打開瀏覽器的 console 看 network 那邊的 request 狀態是怎樣。\u003c/p\u003e\n\u003cp\u003e面試官：你打開了，看到 request 沒有回傳 response，就卡著。\u003c/p\u003e\n\u003cp\u003e我：這樣看起來是後端掛了，先檢查後端的 log。\u003c/p\u003e\n\u003cp\u003e面試官：後端沒有 log，但是這個 controller 只有跟 db 撈資料，其他都沒有做。\u003c/p\u003e\n\u003cp\u003e我：那應該是後端跟 db 溝通的時候卡住了，這張表很大嗎？\u003c/p\u003e\n\u003cp\u003e面試官：大概 10 萬筆。\u003c/p\u003e\n\u003cp\u003e我：那應該還好，db 那台的 memory 跟 CPU 都是健康的嗎？\u003c/p\u003e\n\u003cp\u003e面試官：CPU 跟 memory 的 usage 都不超過 30%。\u003c/p\u003e\n\u003cp\u003e我：db 是 RDS 嗎？\u003c/p\u003e\n\u003cp\u003e面試官：是。\u003c/p\u003e\n\u003cp\u003e我：RDS 可以看每條 query 跑的狀況，這條 query 跑的狀況有異常嗎？\u003c/p\u003e\n\u003cp\u003e面試官：前幾次跑都沒問題，但是這次掛了。\u003c/p\u003e\n\u003cp\u003e我：…\u003c/p\u003e\n\u003cp\u003e面試官：那現在是什麼問題？你需要一點提示嗎？\u003c/p\u003e\n\u003cp\u003e我：好，我要提示。\u003c/p\u003e\n\u003cp\u003e面試官：你手動連接 db 發現連不進去了。\u003c/p\u003e\n\u003cp\u003e我：那應該是 connection pool 沒設定好，需要檢查一下 connection pool 的設定。\u003c/p\u003e","title":"面試 debug 情境題"},{"content":"HTTP 的 method 中最常被用到的應該就是 GET 及 POST 了但是 GET 與 POST 除了使用場景不一樣之外，到底還有哪些區別呢？ 我們知道 GET 通常都透過 query string 來傳遞參數，POST 則是使用 request body但是其實 GET 也可以透過 request body 來傳遞參數，同理 POST 其實也能使用 query string（只是上述兩種方式都不推薦）\nGET vs POST 差異點 POST 不會被 cache，GET 會 POST 不會出現在瀏覽器的訪問記錄裡，GET 會 POST 不能被存成書籤，GET 能 HTTP GET method vs POST method\n","permalink":"http://localhost:1313/posts/http-get-post-comparison/","summary":"\u003cp\u003eHTTP 的 method 中最常被用到的應該就是 GET 及 POST 了但是 GET 與 POST 除了使用場景不一樣之外，到底還有哪些區別呢？\n我們知道 GET 通常都透過 query string 來傳遞參數，POST 則是使用 request body但是其實 GET 也可以透過 request body 來傳遞參數，同理 POST 其實也能使用 query string（只是上述兩種方式都不推薦）\u003c/p\u003e\n\u003ch2 id=\"get-vs-post-差異點\"\u003eGET vs POST 差異點\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ePOST\u003c/strong\u003e 不會被 cache，GET 會\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePOST\u003c/strong\u003e 不會出現在瀏覽器的訪問記錄裡，GET 會\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePOST\u003c/strong\u003e 不能被存成書籤，GET 能\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ca href=\"https://setmao.github.io/2021-07-04/HTTP-GET-method-vs-POST-method/\"\u003eHTTP GET method vs POST method\u003c/a\u003e\u003c/p\u003e","title":"HTTP GET method vs POST method"},{"content":"HTTPS 會加密 path, query string, request body 但是 domain name 不一定會加密（如果沒有使用 SNI 才會把 domain name 加密）\n","permalink":"http://localhost:1313/posts/https-encryption-details/","summary":"\u003cp\u003eHTTPS 會加密 path, query string, request body 但是 domain name 不一定會加密（如果沒有使用 SNI 才會把 domain name 加密）\u003c/p\u003e","title":"HTTPS 加密了哪些東西？"},{"content":" 在 browser 輸入網址 browser 跟 OS 要網址的 IP address OS 向 DNS 查詢 IP address（如果有 cache 會直接回傳 IP address 給 OS） DNS 向 Name Server 查詢 IP address OS 將從 DNS/Name Server 查詢到的 IP address 回傳給 browser browser 拿到 IP address 後對 IP address 做 HTTP/HTTPS request 如果使用 HTTPS 會先使用 TLS 對憑證做認證並產生加密的 session key，並對 request 的資料內容作加密 browser 與 Server 做 TCP 的三項交握確認 Server 現在可以接收資料 Server 上的 Nginx/Apache 接收到 request，並將 request pass 到 code base 中（Python/PHP/JavaScript） code base 將 request 處理完之後回傳 response browser 接收到 response 後根據 response 的內容將頁面 render 出來 ","permalink":"http://localhost:1313/posts/from-request-to-response/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/network.jpeg\" alt=\"network\"  /\u003e\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e在 browser 輸入網址\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ebrowser 跟 OS 要網址的 IP address\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOS 向 DNS 查詢 IP address（如果有 cache 會直接回傳 IP address 給 OS）\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDNS 向 Name Server 查詢 IP address\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOS 將從 DNS/Name Server 查詢到的 IP address 回傳給 browser\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/img/request.jpeg\" alt=\"request\"  /\u003e\n\u003c/p\u003e\n\u003col start=\"6\"\u003e\n\u003cli\u003e\u003cstrong\u003ebrowser 拿到 IP address 後對 IP address 做 HTTP/HTTPS request\u003c/strong\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e如果使用 HTTPS 會先使用 TLS 對憑證做認證並產生加密的 session key，並對 request 的資料內容作加密\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ebrowser 與 Server 做 TCP 的三項交握確認 Server 現在可以接收資料\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eServer 上的 Nginx/Apache 接收到 request，並將 request pass 到 code base 中（Python/PHP/JavaScript）\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecode base 將 request 處理完之後回傳 response\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ebrowser 接收到 response 後根據 response 的內容將頁面 render 出來\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e","title":"從瀏覽器輸入網址到看到網頁到底發生了哪些事？"},{"content":"前言 最近常常在用 Python 寫爬蟲 就好奇 BeautifulSoup 不同的 Parser 之間有什麼差別 於是寫了這篇文來記錄一下\nimport requests from bs4 import BeautifulSoup url = \u0026#34;https://google.com/\u0026#34; resp = requests.get(url) soup = BeautifulSoup(resp.text, \u0026#34;html.parser\u0026#34;) # or soup = BeautifulSoup(resp.text, \u0026#34;lxml\u0026#34;) 網路上的爬蟲教學常常會看到以上兩種寫法，可以看到差別就是 html.parser 跟 lxml 這個其實是在跟 BeautifulSoup 說我們要用哪種 Parser 去解析 HTML 但是到底 BeautifulSoup 支援多少種 Parser，及每種 Parser 到底差在哪？ 於是就隨手 google 了一下發現了 StackOverflow 上的這篇 及 BeautifulSoup 的 doc\n以下是不同的 Parser 的比較表格\ntl;dr\n速度最快：lxml\n相容性最高：html5lib\n剩下用：html.parser\nParser 優點 缺點 html.parser Python 內建，不需額外安裝 速度跟相容性都普通 lxml 快 需要額外安裝（C dependency） html5lib 相容性最高，所有版本的 Python 都能用 慢 參考資料\nBeautifulSoup: what’s the difference between ‘lxml’ and ‘html.parser’ and ‘html5lib’ parsers? Installing a parser ","permalink":"http://localhost:1313/posts/beautifulsoup-parsers-comparison/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近常常在用 Python 寫爬蟲\n就好奇 BeautifulSoup 不同的 Parser 之間有什麼差別\n於是寫了這篇文來記錄一下\u003c/p\u003e\n\u003chr\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \u0026#34;https://google.com/\u0026#34;\n\nresp = requests.get(url)\nsoup = BeautifulSoup(resp.text, \u0026#34;html.parser\u0026#34;)\n# or\nsoup = BeautifulSoup(resp.text, \u0026#34;lxml\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e網路上的爬蟲教學常常會看到以上兩種寫法，可以看到差別就是 html.parser 跟 lxml\n這個其實是在跟 BeautifulSoup 說我們要用哪種 Parser 去解析 HTML\n但是到底 BeautifulSoup 支援多少種 Parser，及每種 Parser 到底差在哪？\n於是就隨手 google 了一下發現了 StackOverflow 上的\u003ca href=\"https://stackoverflow.com/questions/45494505/beautifulsoup-whats-the-difference-between-lxml-and-html-parser-and-html5\"\u003e這篇\u003c/a\u003e 及 BeautifulSoup 的 \u003ca href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser\"\u003edoc\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e以下是不同的 Parser 的比較表格\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003etl;dr\u003c/p\u003e\n\u003cp\u003e速度最快：lxml\u003c/p\u003e\n\u003cp\u003e相容性最高：html5lib\u003c/p\u003e\n\u003cp\u003e剩下用：html.parser\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eParser\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e優點\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e缺點\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ehtml.parser\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePython 內建，不需額外安裝\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e速度跟相容性都普通\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003elxml\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e快\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e需要額外安裝（C dependency）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ehtml5lib\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e相容性最高，所有版本的 Python 都能用\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e慢\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003cp\u003e參考資料\u003c/p\u003e","title":"BeautifulSoup Parsers Comparison"},{"content":"前言 記錄一下要怎麼在 docker 中對 PostgreSQL 備份/匯入資料\n備份 PostgreSQL 在 docker 中備份 PostgreSQL 的指令如下：\ndocker exec -t \u0026lt;container_name\u0026gt; pg_dumpall -c -U \u0026lt;user_name\u0026gt; \u0026gt; dump_`date +%d-%m-%Y\u0026#34;_%H_%M_%S`.sql 匯入 PostgreSQL 將 SQL 檔匯入 PostgreSQL 的指令如下：\ncat \u0026lt;your_dump\u0026gt;.sql | docker exec -i \u0026lt;container_name\u0026gt; psql -U \u0026lt;user_name\u0026gt; 參考資料 Backup/Restore a dockerized PostgreSQL database ","permalink":"http://localhost:1313/posts/backup-and-restore-dockerized-postgresql/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e記錄一下要怎麼在 docker 中對 PostgreSQL 備份/匯入資料\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"備份-postgresql\"\u003e備份 PostgreSQL\u003c/h2\u003e\n\u003cp\u003e在 docker 中備份 PostgreSQL 的指令如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e -t \u0026lt;container_name\u0026gt; pg_dumpall -c -U \u0026lt;user_name\u0026gt; \u0026gt; dump_\u003cspan class=\"sb\"\u003e`\u003c/span\u003edate +%d-%m-%Y\u003cspan class=\"s2\"\u003e\u0026#34;_%H_%M_%S`.sql\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"匯入-postgresql\"\u003e匯入 PostgreSQL\u003c/h2\u003e\n\u003cp\u003e將 SQL 檔匯入 PostgreSQL 的指令如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u0026lt;your_dump\u0026gt;.sql \u003cspan class=\"p\"\u003e|\u003c/span\u003e docker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e -i \u0026lt;container_name\u0026gt; psql -U \u0026lt;user_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"參考資料\"\u003e參考資料\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/24718706/backup-restore-a-dockerized-postgresql-database\"\u003eBackup/Restore a dockerized PostgreSQL database\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Backup/Restore a dockerized PostgreSQL database"},{"content":"前言 最近在 build docker image 的時候遇到 No space left on device 的問題。 因為在解的過程發現好像蠻多人都有遇過這個問題，於是就把解的過程記錄下來，希望能幫到其他人。\n問題描述 今天在 build docker image 的時候出現以下錯誤：\nERROR: Could not install packages due to an EnvironmentError: [Errno 28] No space left on device 因為錯誤出現在 pip install 的步驟，所以我先往 pip 的方向去找，找到以下的解決辦法：\n在家目錄底下開一個新的 tmp 資料夾，讓系統使用該資料夾來解決 tmp 空間不足的問題。 使用以下命令： pip install --no-cache-dir \u0026lt;package_name\u0026gt; 選擇了第二個方法，但問題依然存在。後來發現這其實是 Docker 的暫存空間被塞滿導致的問題。\n解決方案 使用 docker system prune 指令來清理 Docker 暫存空間： docker system prune 這將會刪除：\n所有停止的容器 沒有被至少一個容器使用的網路 所有的 dangling images 和 build cache 若還是無法解決，則進一步檢查容器的 log 檔： du -d1 -h /var/lib/docker/containers | sort -h 找到占用空間大的 log 檔後，使用以下指令清除 log：\nsudo sh -c \u0026#34;cat /dev/null \u0026gt; /var/lib/docker/containers/\u0026lt;container_id\u0026gt;/\u0026lt;container_log_name\u0026gt;\u0026#34; 最後 最終發現是 Ubuntu 的系統空間不足，通過清理 apt 和 log 檔後問題得以解決：\nsudo apt-get autoremove sudo apt-get autoclean journalctl --vacuum-time=3d 參考資料 [Errno 28] No space left on device #5816 Docker error : no space left on device 7 Simple Ways to Free Up Space on Ubuntu ","permalink":"http://localhost:1313/posts/docker-no-space/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e最近在 build docker image 的時候遇到 No space left on device 的問題。\n因為在解的過程發現好像蠻多人都有遇過這個問題，於是就把解的過程記錄下來，希望能幫到其他人。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"問題描述\"\u003e問題描述\u003c/h2\u003e\n\u003cp\u003e今天在 build docker image 的時候出現以下錯誤：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eERROR: Could not install packages due to an EnvironmentError: \u003cspan class=\"o\"\u003e[\u003c/span\u003eErrno 28\u003cspan class=\"o\"\u003e]\u003c/span\u003e No space left on device\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e因為錯誤出現在 \u003ccode\u003epip install\u003c/code\u003e 的步驟，所以我先往 pip 的方向去找，找到以下的解決辦法：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e在家目錄底下開一個新的 tmp 資料夾，讓系統使用該資料夾來解決 tmp 空間不足的問題。\u003c/li\u003e\n\u003cli\u003e使用以下命令：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install --no-cache-dir \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e選擇了第二個方法，但問題依然存在。後來發現這其實是 Docker 的暫存空間被塞滿導致的問題。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"解決方案\"\u003e解決方案\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e使用 \u003ccode\u003edocker system prune\u003c/code\u003e 指令來清理 Docker 暫存空間：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker system prune\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e這將會刪除：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e所有停止的容器\u003c/li\u003e\n\u003cli\u003e沒有被至少一個容器使用的網路\u003c/li\u003e\n\u003cli\u003e所有的 dangling images 和 build cache\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e若還是無法解決，則進一步檢查容器的 log 檔：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edu -d1 -h /var/lib/docker/containers \u003cspan class=\"p\"\u003e|\u003c/span\u003e sort -h\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e找到占用空間大的 log 檔後，使用以下指令清除 log：\u003c/p\u003e","title":"Docker: no space left on device"},{"content":"前言 因為 Django 1.11 在今年四月開始停止更新了，所以花了一天時間幫公司從 Django 1.11 升級到 2.2 於是想用這篇來記錄一下升級的過程\n前置作業： 我在升級前找了很多資料跟別人升級的心得，主要參考以下幾篇\n博客将 Django 1.11+ 升级到 Django 2.2+ 遇到的问题及规避方法 Django1和2的区别 Upgrading Django to a newer version 第一篇主要是別人實際更新上遇到個問題\n第二篇是再講 Django 1.11 跟 Django 2.X 主要差別在哪\n第三篇是官方文件\n開始！ python -Wa manage.py test\n先用以下指令掃一下升級後現在的 code 可能會在哪裡報錯\npython -Wa manage.py test TypeError: init() missing 1 required positional argument: ‘on_delete’\n用步驟一的指令掃完後，報了很多下面的錯誤\nTypeError: init() missing 1 required positional argument: \u0026lsquo;on_delete\u0026rsquo; 出現這個的原因是因為 Django 2.X 開始 ForeignKey 的 on_delete 參數變成必填欄位（1.11 預設值為 on_delete=models.CASCADE），所以我們得先手動將 on_delete=models.CASCADE 加上去\n以下兩種寫法是等價的 django 1.11 creator = models.ForeignKey(User)\ndjango 2.2 creator = models.ForeignKey(User, on_delete=models.CASCADE) P.S. TreeForeignKey, OneToOneField..等也算 ForeignKey 的一種（可以去看 source code，其實這些都是繼承 ForeignKey 實作出來的），這些都要加，但是 GenericForeignKey 不用\n補充一下 on_delete 的幾種選擇\non_delete=models.CASCADE, # 刪除有 ForeignKey 的 model 時將所以有有關係的 model 一起刪除 on_delete=models.DO_NOTHING, # 刪除有 ForeignKey 的 model 時 on_delete=models.PROTECT, # 刪除有 ForeignKey 的 model 時觸發錯誤 ProtectedError on_delete=models.SET_NULL, # 刪除有 ForeignKey 的 model 時將已經有關聯的欄位設為 NULL on_delete=models.SET_DEFAULT, # 刪除有 ForeignKey 的 model 時將已經有關聯的欄位設為 default 值 on_delete-models.SET(), # 刪除有 ForeignKey 的 model 後執行一個函數 Package’s migration\n加完 on_delete 後就會發現報了一些套件的 models 問題，一樣也是 on_delete 的問題（還有一些是 url 的問題，這個後面再說）\n這種問題應該只有更新套件才有解了，不過通常都是 django 開頭的套件才會出錯\n這邊列出幾個這次升級連帶一起升級的套件供參\ndjango-avatar 4.0.0 -\u0026gt; 5.0.0 django-bootstrap-pagination 1.6.3 -\u0026gt; 1.7.1 django-celery-beat 1.0.1 -\u0026gt; 2.0.0 django-money 0.11.4 -\u0026gt; 1.1 django-screamshot 0.8.1 -\u0026gt; 0.8.5 django-allauth 0.40.0 -\u0026gt; 0.42.0 ‘indexes’ refers to the nonexistent field\n修改完 on_delete 的問題後，再用步驟一掃應該掃不出什麼了\n這時候就可以直接\npython manage.py runserver 0.0.0.0:8000 接著應該會看到一堆的 waring\n其中一個 waring 是這個\n\u0026lsquo;indexes\u0026rsquo; refers to the nonexistent field 會報錯的原因是因為在有 ForeignKey 的 model 中做 index 時，在 Django 1.11 中以下寫法是被允許的，因為其實 ForeignKey 在 db 中的做法也是在這個資料表中開一個欄位存放關聯對象的 id\nclass EdmRecipient(BaseModel): team = models.ForeignKey(Team) app = models.ForeignKey(App)\nclass Meta: indexes = [ models.Index(fields=['team_id', 'edm_id'], name='edmrecipient_team_edm_cat'), ] 但是在 Django 2.2 一定得這樣寫，不能用 team_id 的寫法，只能用 team\nclass EdmRecipient(BaseModel): team = models.ForeignKey(Team, on_delete=models.CASCADE) app = models.ForeignKey(App, on_delete=models.CASCADE)\nclass Meta: indexes = [ models.Index(fields=['team_id', 'edm_id'], name='edmrecipient_team_edm_cat'), ] from django.core.urlresolvers import reverse -\u0026gt; from django.urls import reverse\n這個應該沒什麼好說的，就是換個位置 import 而已\nurl() -\u0026gt; path()\n接著就來到應該算是這次升級改動最大的地方了\n在 Django 1.11 中大家應該最常用\nurl(r\u0026rsquo;^index/$\u0026rsquo;, views.IndexView.as_view()) 但在 Django 2.2 中將 url() 改成 path()，而且 path 內建了幾個 type 來篩選 url 的參數\n舉個例子\nDjango 1.11 url(r\u0026rsquo;^smarts/(?P[a-zA-Z0-9-_]+)/(?P[a-zA-Z0-9-]+)/edit/$\u0026rsquo;, views.SmartEdit.as_view(), name=\u0026lsquo;smart_edit\u0026rsquo;),\nDjango 2.2 path(\u0026lsquo;smarts/slug:slug/uuid:uuid/edit/\u0026rsquo;, views.SmartEdit.as_view(), name=\u0026lsquo;smart_edit\u0026rsquo;), 是不是簡潔很多！\n簡單來說 type:parameter_name\n支援的 type 有以下幾種\nstr - default，不吃 ‘/‘ int - 就是 int slug - 只吃英、數、-、_ uuid - 只吃 uuid path - str，但是吃 ‘/‘ 使用 uuid 時會回傳型別為 uuid 的資料，如果有特別需要對資料做處理時要注意\nref: Path converters\n那如果我還是有用到 re 的需求該怎麼辦？用下面這個\nre_path() P.S. 在看 source code 的時候我發現了這個\ndef url(regex, view, kwargs=None, name=None): return re_path(regex, view, kwargs, name) source code: https://github.com/django/django/blob/stable/2.2.x/django/conf/urls/__init__.py\n這代表了其實 url 還是可以用，但是其實背後是用 re_path，而且要改成\nfrom django.conf.urls import url Django TypeError: render() got an unexpected keyword argument ‘renderer’\n其實原本做完步驟六就已經上線了，結果才發現這個問題QQ\nDjango TypeError: render() got an unexpected keyword argument ‘renderer’\n看上面這篇說 renderer 這個參數已經從 render() 中移除了\n後來才找到會報這個是因為 django-ckeditor 這個套件的關係\n升級它就搞定啦！\ndjango-ckeditor 5.4.0 -\u0026gt; 5.9.0 參考資料 博客将 Django 1.11+ 升级到 Django 2.2+ 遇到的问题及规避方法 Django1和2的区别 Upgrading Django to a newer version Path converters Django TypeError: render() got an unexpected keyword argument ‘renderer’\n","permalink":"http://localhost:1313/posts/django-1.11-to-2.2/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e因為 Django 1.11 在今年四月開始停止更新了，所以花了一天時間幫公司從 Django 1.11 升級到 2.2\n於是想用這篇來記錄一下升級的過程\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"前置作業\"\u003e前置作業：\u003c/h2\u003e\n\u003cp\u003e我在升級前找了很多資料跟別人升級的心得，主要參考以下幾篇\u003c/p\u003e\n\u003cp\u003e博客将 Django 1.11+ 升级到 Django 2.2+ 遇到的问题及规避方法\nDjango1和2的区别\nUpgrading Django to a newer version\n第一篇主要是別人實際更新上遇到個問題\u003c/p\u003e\n\u003cp\u003e第二篇是再講 Django 1.11 跟 Django 2.X 主要差別在哪\u003c/p\u003e\n\u003cp\u003e第三篇是官方文件\u003c/p\u003e\n\u003cp\u003e開始！\npython -Wa manage.py test\u003c/p\u003e\n\u003cp\u003e先用以下指令掃一下升級後現在的 code 可能會在哪裡報錯\u003c/p\u003e\n\u003cp\u003epython -Wa manage.py test\nTypeError: \u003cstrong\u003einit\u003c/strong\u003e() missing 1 required positional argument: ‘on_delete’\u003c/p\u003e\n\u003cp\u003e用步驟一的指令掃完後，報了很多下面的錯誤\u003c/p\u003e\n\u003cp\u003eTypeError: \u003cstrong\u003einit\u003c/strong\u003e() missing 1 required positional argument: \u0026lsquo;on_delete\u0026rsquo;\n出現這個的原因是因為 Django 2.X 開始 ForeignKey 的 on_delete 參數變成必填欄位（1.11 預設值為 on_delete=models.CASCADE），所以我們得先手動將 on_delete=models.CASCADE 加上去\u003c/p\u003e","title":"Django 1.11 to 2.2"},{"content":"前言 Django 的 Migrations 除了在能在資料庫中建立新的資料表、修改舊的資料表結構外，我們也能自己寫 code 在新增資料表、修改舊的資料表結構的同時對資料表做 CRUD（Create, Read, Update, Delete）\n比如以下情境：\n我現在要新建一個資料表用來存 Email Template 給客戶使用，希望在建立資料表的同時能將一些 default template 一起寫入資料庫中 原本有兩個資料表分別負責存不同的資料，現在因為一些關係要把這兩個資料表整合在一起，所以我想在新建資料表後將舊的資料表中的資料轉移到新的資料表後將舊的兩個資料表刪除 這些都可以在 Django Migrations 中完成！\n首先我們先執行下面的指令來生出一個空的 migration\npython manage.py makemigrations \u0026ndash;empty yourappname 接著在 migration 中加入以下的 code，並將 combine_names 改成你想做的事情\nfrom django.db import migrations def combine_names(apps, schema_editor): # We can\u0026#39;t import the Person model directly as it may be a newer # version than this migration expects. We use the historical version. Person = apps.get_model(\u0026#39;yourappname\u0026#39;, \u0026#39;Person\u0026#39;) for person in Person.objects.all(): person.name = \u0026#39;%s %s\u0026#39; % (person.first\\_name, person.last\\_name) person.save() class Migration(migrations.Migration): dependencies = [ (\u0026#39;yourappname\u0026#39;, \u0026#39;0001\\_initial\u0026#39;), ] operations = [ migrations.RunPython(combine_names), ] 這邊需要注意的是 model 需要用這種方式取得：\nPerson = apps.get_model(\u0026#39;yourappname\u0026#39;, \u0026#39;Person\u0026#39;) 然後 migrations.RunPython(combine_names) 這行將會在執行 migrate 的同時跑這個 function: combine_names\n寫完之後\npython manage.py migrate ","permalink":"http://localhost:1313/posts/django-migrations/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eDjango 的 Migrations 除了在能在資料庫中建立新的資料表、修改舊的資料表結構外，我們也能自己寫 code 在新增資料表、修改舊的資料表結構的同時對資料表做 CRUD（Create, Read, Update, Delete）\u003c/p\u003e\n\u003cp\u003e比如以下情境：\u003c/p\u003e\n\u003cp\u003e我現在要新建一個資料表用來存 Email Template 給客戶使用，希望在建立資料表的同時能將一些 default template 一起寫入資料庫中\n原本有兩個資料表分別負責存不同的資料，現在因為一些關係要把這兩個資料表整合在一起，所以我想在新建資料表後將舊的資料表中的資料轉移到新的資料表後將舊的兩個資料表刪除\n這些都可以在 Django Migrations 中完成！\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e首先我們先執行下面的指令來生出一個空的 migration\u003c/p\u003e\n\u003cp\u003epython manage.py makemigrations \u0026ndash;empty yourappname\n接著在 migration 中加入以下的 code，並將 combine_names 改成你想做的事情\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-Python\" data-lang=\"Python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edjango.db\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003emigrations\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ecombine_names\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eapps\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eschema_editor\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# We can\u0026#39;t import the Person model directly as it may be a newer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# version than this migration expects. We use the historical version.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eapps\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget_model\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;yourappname\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Person\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eperson\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ePerson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eobjects\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eall\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"si\"\u003e%s\u003c/span\u003e\u003cspan class=\"s1\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e%s\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\\\u003cspan class=\"n\"\u003e_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\\\u003cspan class=\"n\"\u003e_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eperson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esave\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMigration\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emigrations\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMigration\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003edependencies\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;yourappname\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;0001\\_initial\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eoperations\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003emigrations\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRunPython\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecombine_names\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e這邊需要注意的是 model 需要用這種方式取得：\u003c/p\u003e","title":"Django Migrations"}]